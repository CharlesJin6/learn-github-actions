name: learn-github-actions for build armbian
run-name: ${{github.action}} build armbian
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      set_release:
        description: "Select OS release:"
        required: false
        default: "jammy"
        type: choice
        options:
          - jammy
          - bullseye
          - lunar
          - bookworm
env:
  TZ: Asia/Shanghai
  ROOTFS_SCRIPT: compile-kernel/tools/script/armbian_rootfs.sh
jobs:
  check-bats-version:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        id: checkout_code
        uses: actions/checkout@v4
      # - name: setup node
      #   id: setup_node
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '14'
      # - name: install bats
      #   id: install_bats
      #   run: npm install -g bats
      # - name: print version
      #   id: print_version
      #   run: bats -v
      - name: print input env
        id: print_env
        run: |
          echo "::group::log group 1"
          echo Select OS release:${{inputs.set_release}}
          df -hT ${PWD}
          echo "::endgroup::"

          echo "::group::log group 2"
          docker --version
          docker image ls
          docker container ls
          docker rmi `docker images -q`
          echo "::endgroup::"
      - name: Install dependency tool
        id: install_dependency_tool
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_armbian)
          sudo -E systemctl daemon-reload
          #sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}
      
      - name: Down armbian build code
        id: down_armbian_build
        if: ${{ steps.install_dependency_tool.outputs.status }} == 'success' && !cancelled()
        run: |
          pwd
          df -hT ${PWD}
          git clone -q --single-branch --depth=1 --branch=main https://github.com/armbian/build.git build
          echo "status=success" >> ${GITHUB_OUTPUT}
      - name: Compile Armbian [ ${{ inputs.set_release }} ]
        id: compile
        if: ${{ steps.down_armbian_build.outputs.status }} == 'success' && !cancelled()
        run: |
          # Compile method and parameter description: https://docs.armbian.com/Developer-Guide_Build-Options
          cd build/
              ./compile.sh RELEASE=${{ inputs.set_release }} BOARD=odroidn2 BRANCH=current BUILD_MINIMAL=no \
                            BUILD_ONLY=default HOST=armbian BUILD_DESKTOP=no EXPERT=yes KERNEL_CONFIGURE=no \
                            COMPRESS_OUTPUTIMAGE="sha" SHARE_LOG=yes
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Organize files and clear space
        id: clean
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          pwd
          tree build/output
          tree build/cache/rootfs
      - name: Generate list using Markdown
        run: |
          echo "This is the lead in sentence for the list" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "- Lets add a bullet point" >> $GITHUB_STEP_SUMMARY
          echo "- Lets add a second bullet point" >> $GITHUB_STEP_SUMMARY
          echo "- How about a third one?" >> $GITHUB_STEP_SUMMARY